- hosts: webserver
  gather_facts: no
  become: yes

  vars:
    default_users: ['nobody']
    default_groups: ['nogroup']
    users_file: users.yml

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Python 3
      ansible.builtin.apt:
        name: python3
        state: present

    - name: Get list of all users
      shell: "getent passwd | awk -F: '$3 > 1000 {print $1}'"
      changed_when: false
      register: users

    - name: Remove all users
      user:
        name: "{{ item }}"
        state: absent
        remove: yes
      with_items: "{{ users.stdout_lines }}"
      when: item not in default_users
      notify: Remove groups with GID > 1000 excluding nogroup  # Notify the handler

    - name: Load users from users.yaml
      include_vars:
        file: "{{ users_file }}"
        name: users_data

    - name: Load groups from groups.yaml
      include_vars:
        file: groups.yml
        name: groups_data

    - name: Create groups from groups.yml
      group:
        name: "{{ item.name }}"
        state: present
      loop: "{{ groups_data.groups }}"
      when: item.name not in default_groups

    # - name: Add required users
    #   user:
    #     name: "{{ item.user }}"
    #     state: present
    #     groups: "{{ groups_data.groups | selectattr('name', 'in', item.groups) | map(attribute='name') | list }}"
    #     shell: /bin/bash
    #   loop: "{{ users_data.users }}"

    # - name: Add required users
    #   user:
    #     name: "{{ item.user }}"
    #     state: present
    #     groups: "{{ groups_data.user_groups | selectattr('name', 'in', item.groups) | map(attribute='name') | list }}"
    #     shell: /bin/bash
    #   loop: "{{ users_data.users }}"

    - name: Add required users
      user:
        name: "{{ item.user }}"
        state: present
        groups: "{{ groups_data.groups | selectattr('name', 'in', groups_data.user_groups[item.user]) | map(attribute='name') | list }}"
        shell: /bin/bash
      loop: "{{ users_data.users }}"

    # - name: Add required users
    #   user:
    #     name: "{{ item.user }}"
    #     state: present
    #     groups: "{{ item.groups }}"
    #     shell: /bin/bash
    #   loop: "{{ users_data.users }}"


    - name: Add SSH public keys
      authorized_key:
        user: "{{ item.user }}"
        state: present
        key: "{{ item.public_key }}"
      loop: "{{ users_data.users }}"

  handlers:
    - name: Get list of all groups
      command: "getent group | awk -F: '$3 > 1000 && $1 != \"nogroup\" {print $1}'"
      changed_when: false
      register: groups

    - name: Remove groups with GID > 1000 excluding nogroup
      command: "groupdel {{ item.split(':')[0] }}"
      loop: "{{ groups.stdout_lines }}"
      when: item.split(':')[2] | int > 1000


  
